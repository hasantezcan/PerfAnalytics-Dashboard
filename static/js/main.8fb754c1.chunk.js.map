{"version":3,"sources":["layouts/styles.module.scss","components/TitleWidget/styles.module.scss","service/axios.ts","service/index.ts","context/MetricProvider.tsx","context/AppProviders/index.tsx","layouts/BaseLayout.tsx","util/color.utils.ts","components/LineChartWidget/index.tsx","routes/Main/PerfCharts/index.tsx","components/TimeRangeFilter/index.tsx","util/text.utils.tsx","components/UrlFilter/index.tsx","routes/Main/Filter/index.tsx","components/EntriesWidget/index.tsx","routes/Main/Entries/index.tsx","components/TitleWidget/index.tsx","routes/Main/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","axios","Axios","create","baseURL","headers","fetchMetricByTimeRange","start","end","a","get","params","data","fetchMetricByURL","MetricContext","createContext","MetricProvider","children","useState","metrics","setMetrics","urlMetrics","setUrlMetrics","selectedUrls","setSelectedUrls","useEffect","initializeMetrics","then","context","Provider","value","useMetricContext","useContext","AppProviders","Footer","Layout","Content","cx","classNames","bind","styles","BaseLayout","className","justify","style","paddingTop","lg","span","target","rel","href","stringToColor","str","hash","i","length","charCodeAt","colour","toString","substr","LineChartWidget","title","xs","md","ResponsiveContainer","width","height","LineChart","margin","top","right","bottom","left","filter","item","includes","url","map","Line","type","stroke","dot","dataKey","name","CartesianGrid","strokeDasharray","XAxis","domain","tickFormatter","unixTime","moment","format","YAxis","Tooltip","labelFormatter","PerfCharts","mapMetrics","URL","time","Date","getTime","gutter","Title","Typography","TimeRangeFilter","setTimeRange","date","setDate","subtract","startTime","setStartTime","endTime","setEndTime","level","Item","onChange","dateString","defaultValue","RangePicker","onClick","toISOString","getClippedText","text","maxLength","CheckboxGroup","Checkbox","Group","UrlFilter","urls","onSelect","urlOptions","label","labelCol","offset","indeterminate","e","checked","options","list","image","imageStyle","description","Filter","metricUrl","metricByTimeRange","EntriesWidget","expandedRowKeys","setExpandedRowKeys","expandedRowEntries","setExpandedRowEntries","columns","dataIndex","key","ellipsis","showTitle","render","sorter","b","UserAgent","FCP","TTFB","DomLoad","WindowLoad","createdAt","timestampA","timestampB","parseInt","rowKey","expandable","expandedRowRender","transferSize","dataSource","pagination","tableLayout","onExpand","expanded","record","keys","push","_id","Entries","scroll","y","x","TitleWidget","Main","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fb754c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"base-layout\":\"styles_base-layout__1tdqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title-widget\":\"styles_title-widget__iXp_I\"};","import Axios from 'axios'\n\nconst axios = Axios.create({\n  baseURL: 'https://perfanalytics-api-ht.herokuapp.com',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport default axios\n","import axios from './axios'\n\nimport { Metric, MetricByURL } from '~/models/Metric'\n\nasync function fetchMetricByTimeRange(start?: Date, end?: Date) {\n  const { data } = await axios.get('/api/metrics', {\n    params: {\n      start,\n      end\n    }\n  })\n  return data as Metric[]\n}\n\nasync function fetchMetricByURL(start?: Date, end?: Date) {\n  const { data } = await axios.get('/api/metrics-by-url', {\n    params: {\n      start,\n      end\n    }\n  })\n\n  return data as MetricByURL[]\n}\n\nexport { fetchMetricByTimeRange, fetchMetricByURL }\n","import {\n  createContext,\n  useContext,\n  PropsWithChildren,\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction\n} from 'react'\n\nimport { Metric, MetricByURL } from '../models/Metric'\nimport { fetchMetricByTimeRange, fetchMetricByURL } from '../service'\n\ninterface MetricContextModel {\n  metrics: Metric[]\n  setMetrics: Dispatch<SetStateAction<Metric[]>>\n  urlMetrics: MetricByURL[]\n  setUrlMetrics: Dispatch<SetStateAction<MetricByURL[]>>\n  selectedUrls: string[]\n  setSelectedUrls: Dispatch<SetStateAction<string[]>>\n}\n\nconst MetricContext = createContext<MetricContextModel>(\n  {} as MetricContextModel\n)\nfunction MetricProvider({ children }: PropsWithChildren<any>) {\n  const [metrics, setMetrics] = useState<Metric[]>([])\n  const [urlMetrics, setUrlMetrics] = useState<MetricByURL[]>([])\n  const [selectedUrls, setSelectedUrls] = useState<string[]>([])\n\n  useEffect(() => {\n    const initializeMetrics = async () => {\n      setMetrics(await fetchMetricByTimeRange())\n      setUrlMetrics(await fetchMetricByURL())\n    }\n\n    initializeMetrics().then()\n  }, [])\n\n  const context: MetricContextModel = {\n    metrics,\n    setMetrics,\n    urlMetrics,\n    setUrlMetrics,\n    selectedUrls,\n    setSelectedUrls\n  }\n\n  return (\n    <MetricContext.Provider value={context}>{children}</MetricContext.Provider>\n  )\n}\n\nconst useMetricContext = () => useContext(MetricContext)\n\nexport { MetricContext, MetricProvider, useMetricContext }\n","import { PropsWithChildren } from 'react'\nimport { MetricProvider } from '../MetricProvider'\n\nfunction AppProviders({ children }: PropsWithChildren<any>) {\n  return <MetricProvider>{children}</MetricProvider>\n}\n\nexport default AppProviders\n","import { PropsWithChildren } from 'react'\nimport { Layout, Row, Col } from 'antd'\nimport classNames from 'classnames/bind'\nimport styles from './styles.module.scss'\n\nconst { Footer, Content } = Layout\nconst cx = classNames.bind(styles)\n\ninterface BaseLayoutProps {}\n\nfunction BaseLayout({ children }: PropsWithChildren<BaseLayoutProps>) {\n  return (\n    <Layout className={cx('base-layout')}>\n      <Content>\n        <Row justify={'center'} style={{ paddingTop: 25 }}>\n          <Col lg={{ span: 18 }}>{children}</Col>\n        </Row>\n      </Content>\n      <Footer>\n        <Row justify={'center'}>\n          <p>\n            Made by{' '}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://github.com/hasantezcan\"\n            >\n              @hasantezcan{' '}\n            </a>\n          </p>\n          <p></p>\n          <p>\n            , Source code{' '}\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              href=\"https://github.com/hasantezcan/PerfAnalytics-Dashboard\"\n            >\n              in GitHub\n            </a>\n          </p>\n        </Row>\n      </Footer>\n    </Layout>\n  )\n}\n\nexport default BaseLayout\n","const stringToColor = function (str: string) {\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n  }\n  let colour = '#'\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff\n    colour += ('00' + value.toString(16)).substr(-2)\n  }\n  return colour\n}\n\nexport { stringToColor }\n","import {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts'\nimport { Col, Card, Empty } from 'antd'\nimport { ChartMetric } from '~/models/Metric'\nimport { stringToColor } from '../../util/color.utils'\nimport moment from 'moment'\ninterface LineChartWidgetProps {\n  title?: string\n  data?: ChartMetric[]\n  selectedUrls: string[]\n}\n\nfunction LineChartWidget({ data, selectedUrls, title }: LineChartWidgetProps) {\n  return (\n    <Col xs={{ span: 24 }} md={{ span: 12 }}>\n      <Card title={title}>\n        {selectedUrls.length > 0 ? (\n          <ResponsiveContainer width=\"100%\" height={220}>\n            <LineChart margin={{ top: 5, right: 20, bottom: 5, left: 20 }}>\n              {data\n                ?.filter((item) => selectedUrls.includes(item.url))\n                .map((url) => (\n                  <Line\n                    key={url.url}\n                    type=\"monotone\"\n                    stroke={stringToColor(url.url)}\n                    dot={false}\n                    dataKey=\"value\"\n                    name={url.url}\n                    data={url.data}\n                  />\n                ))}\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n              <XAxis\n                domain={['auto', 'auto']}\n                dataKey=\"time\"\n                name=\"Time\"\n                type=\"number\"\n                tickFormatter={(unixTime) =>\n                  moment(unixTime).format('HH:mm:ss')\n                }\n              />\n              <YAxis\n                dataKey=\"value\"\n                type=\"number\"\n                tickFormatter={(value) => `${value} ms`}\n              />\n              <Tooltip\n                labelFormatter={(name: any) => moment(name).format('HH:mm')}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        ) : (\n          <Empty />\n        )}\n      </Card>\n    </Col>\n  )\n}\n\nexport default LineChartWidget\n","import { Row } from 'antd'\n\nimport LineChartWidget from '@components/LineChartWidget'\nimport { useMetricContext } from '~/context/MetricProvider'\nimport { ChartMetric, MetricType, TimeStampValue } from '~/models/Metric'\n\nfunction PerfCharts() {\n  const { urlMetrics, selectedUrls } = useMetricContext()\n\n  const mapMetrics = (type: MetricType): ChartMetric[] =>\n    urlMetrics.map((url) => ({\n      url: url.URL,\n      data: url[type].map(\n        (i): TimeStampValue => ({\n          value: i.value,\n          time: new Date(i.time).getTime()\n        })\n      )\n    }))\n\n  return (\n    <Row gutter={[16, 16]}>\n      <LineChartWidget\n        data={mapMetrics('TTFB')}\n        title=\"TTFB\"\n        selectedUrls={selectedUrls}\n      />\n\n      <LineChartWidget\n        data={mapMetrics('FCP')}\n        title=\"FCP\"\n        selectedUrls={selectedUrls}\n      />\n\n      <LineChartWidget\n        data={mapMetrics('DomLoad')}\n        title=\"DomLoad\"\n        selectedUrls={selectedUrls}\n      />\n\n      <LineChartWidget\n        data={mapMetrics('WindowLoad')}\n        title=\"WindowLoad\"\n        selectedUrls={selectedUrls}\n      />\n    </Row>\n  )\n}\n\nexport default PerfCharts\n","import { useState } from 'react'\nimport { DatePicker, TimePicker, Button, Form, Typography } from 'antd'\nimport moment from 'moment'\n\nconst { Title } = Typography\n\ninterface TimeRangeFilterProps {\n  setTimeRange: (start: any, end: any) => void\n}\n\nfunction TimeRangeFilter({ setTimeRange }: TimeRangeFilterProps) {\n  const [date, setDate] = useState(moment().format('YYYY-MM-DD'))\n  const [startTime, setStartTime] = useState(\n    moment().subtract(30, 'minutes').format('HH:mm:ss')\n  )\n  const [endTime, setEndTime] = useState(moment().format('HH:mm:ss'))\n\n  const handleTimeRange = () => {\n    const start = moment(`${date} ${startTime}`).toISOString()\n    const end = moment(`${date} ${endTime}`).toISOString()\n\n    setTimeRange(start, end)\n  }\n\n  return (\n    <Form>\n      <Title level={3}>Select Time Range</Title>\n      <Form.Item>\n        <DatePicker\n          onChange={(value, dateString) => setDate(dateString)}\n          defaultValue={moment()}\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <TimePicker.RangePicker\n          onChange={(value, dateString) => {\n            setStartTime(dateString[0])\n            setEndTime(dateString[1])\n          }}\n          defaultValue={[moment().subtract(30, 'minutes'), moment()]}\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" onClick={handleTimeRange}>\n          Get Metrics\n        </Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default TimeRangeFilter\n","import { Tooltip } from 'antd'\n\n/* Function to generate the text inside Tooltip with ellipsis when text exceeds given length */\nfunction getClippedText(text: string, maxLength: number) {\n  return text.length > maxLength ? (\n    <Tooltip title={text}>{text.substr(0, maxLength)}...</Tooltip>\n  ) : (\n    text\n  )\n}\n\nexport { getClippedText }\n","import { Checkbox, Typography, Form, Empty, Button } from 'antd'\nimport { getClippedText } from '../../util/text.utils'\n\nconst { Title } = Typography\nconst CheckboxGroup = Checkbox.Group\n\ninterface UrlFilterProps {\n  urls: string[]\n  onSelect: (urls: string[]) => void\n  selectedUrls: string[]\n}\n\nfunction UrlFilter({ urls, onSelect, selectedUrls }: UrlFilterProps) {\n  const onChange = (list: any) => {\n    onSelect(list)\n  }\n\n  const onCheckAllChange = (e: any) => {\n    onSelect(e.target.checked ? urls : [])\n  }\n\n  const urlOptions = urls.map((url) => ({\n    label: getClippedText(url, 40),\n    value: url\n  }))\n\n  return (\n    <Form>\n      <Title level={3}>Select URL</Title>\n\n      {urls.length > 0 ? (\n        <>\n          <Form.Item labelCol={{ span: 6, offset: 6 }}>\n            <Checkbox\n              indeterminate={\n                selectedUrls.length > 0 && selectedUrls.length !== urls.length\n              }\n              onChange={onCheckAllChange}\n              checked={selectedUrls.length > 0}\n            >\n              Check all\n            </Checkbox>\n          </Form.Item>\n\n          <Form.Item>\n            <CheckboxGroup\n              options={urlOptions}\n              value={selectedUrls}\n              onChange={onChange}\n            />\n          </Form.Item>\n        </>\n      ) : (\n        <Empty\n          image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\n          imageStyle={{\n            height: 60\n          }}\n          description={\n            <span>There is not metric found in this time range</span>\n          }\n        >\n          <Button\n            href=\"https://github.com/hasantezcan/PerfAnalytics-Dashboard#:~:text=You%20can%20create%20analytics%20metric%20data%20from%20those%20sites:\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            type=\"primary\"\n          >\n            Create Now\n          </Button>\n        </Empty>\n      )}\n    </Form>\n  )\n}\n\nexport default UrlFilter\n","import { useEffect } from 'react'\nimport { Row, Col, Card } from 'antd'\n\nimport TimeRangeFilter from '@components/TimeRangeFilter/index'\nimport UrlFilter from '~/components/UrlFilter'\nimport { fetchMetricByTimeRange, fetchMetricByURL } from '~/service'\nimport { useMetricContext } from '~/context/MetricProvider'\n\nfunction Filter() {\n  const {\n    setUrlMetrics,\n    setMetrics,\n    urlMetrics,\n    setSelectedUrls,\n    selectedUrls\n  } = useMetricContext()\n\n  const urls = urlMetrics.map((url) => url.URL)\n\n  const setTimeRange = async (start: any, end: any) => {\n    const metricUrl = await fetchMetricByURL(start, end)\n    const metricByTimeRange = await fetchMetricByTimeRange(start, end)\n    setUrlMetrics(metricUrl)\n    setMetrics(metricByTimeRange)\n  }\n\n  useEffect(() => {\n    setSelectedUrls(urls)\n    // eslint-disable-next-line\n  }, [urlMetrics])\n\n  return (\n    <Card>\n      <Row gutter={16}>\n        <Col md={12}>\n          <TimeRangeFilter setTimeRange={setTimeRange} />\n        </Col>\n        <Col md={12}>\n          <UrlFilter\n            urls={urls}\n            onSelect={setSelectedUrls}\n            selectedUrls={selectedUrls}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Filter\n","import { useState } from 'react'\nimport { Table, Typography } from 'antd'\nimport moment from 'moment'\n\nimport { getClippedText } from '../../util/text.utils'\nimport { Metric } from '~/models/Metric'\n\nimport './style.css'\n\nconst { Title } = Typography\ninterface EntriesWidgetProps {\n  metrics: Metric[]\n  selectedUrls: string[]\n}\n\nfunction EntriesWidget({ metrics, selectedUrls }: EntriesWidgetProps) {\n  const [expandedRowKeys, setExpandedRowKeys] = useState([])\n  const [expandedRowEntries, setExpandedRowEntries] = useState([])\n\n  const onTableRowExpand = (expanded: any, record: any) => {\n    const keys = []\n\n    if (expanded) {\n      keys.push(record._id)\n    }\n\n    setExpandedRowEntries(record.Entries)\n    setExpandedRowKeys(keys as any)\n  }\n\n  const expandedRowRender = () => {\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        ellipsis: {\n          showTitle: false\n        },\n        render: (name: any) => (\n          <a href={name} target=\"_blank\" rel=\"noreferrer\">\n            {getClippedText(name, 50)}\n          </a>\n        )\n      },\n      {\n        title: 'Initiator Type',\n        dataIndex: 'initiatorType',\n        key: 'initiatorType'\n      },\n      {\n        title: 'Response End',\n        dataIndex: 'responseEnd',\n        key: 'responseEnd',\n        ellipsis: true\n      },\n      {\n        title: 'Transfer Size',\n        dataIndex: 'transferSize',\n        key: 'transferSize',\n        render: (transferSize: any) => `${transferSize} B`\n      },\n      {\n        title: 'Time',\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: (createdAt: any) => moment(createdAt).format('HH:mm:ss')\n      }\n    ]\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={expandedRowEntries}\n        pagination={false}\n        tableLayout=\"auto\"\n      />\n    )\n  }\n\n  /* istanbul ignore next */\n  const columns = [\n    {\n      title: 'Url',\n      dataIndex: 'URL',\n      key: 'URL',\n      ellipsis: {\n        showTitle: false\n      },\n      render: (URL: any) => (\n        <a href={URL} target=\"_blank\" rel=\"noreferrer\">\n          {getClippedText(URL, 65)}\n        </a>\n      ),\n      sorter: (a: any, b: any) => a.URL.length - b.URL.length\n    },\n    {\n      title: 'UserAgent',\n      dataIndex: 'UserAgent',\n      key: 'UserAgent',\n      ellipsis: {\n        showTitle: false\n      },\n      render: (UserAgent: any) => getClippedText(UserAgent, 20)\n    },\n    {\n      title: 'FCP',\n      dataIndex: 'FCP',\n      key: 'FCP',\n      ellipsis: true,\n      render: (FCP: any) => getClippedText(FCP.toString(), 9),\n      sorter: (a: any, b: any) => a.FCP - b.FCP\n    },\n    {\n      title: 'TTFB',\n      dataIndex: 'TTFB',\n      key: 'TTFB',\n      ellipsis: true,\n      render: (TTFB: any) => getClippedText(TTFB.toString(), 9),\n      sorter: (a: any, b: any) => a.TTFB - b.TTFB\n    },\n    {\n      title: 'DomLoad',\n      dataIndex: 'DomLoad',\n      key: 'DomLoad',\n      ellipsis: true,\n      render: (DomLoad: any) => getClippedText(DomLoad.toString(), 9),\n      sorter: (a: any, b: any) => a.DomLoad - b.DomLoad\n    },\n    {\n      title: 'WindowLoad',\n      dataIndex: 'WindowLoad',\n      key: 'WindowLoad',\n      ellipsis: true,\n      render: (WindowLoad: any) => getClippedText(WindowLoad.toString(), 9),\n      sorter: (a: any, b: any) => a.WindowLoad - b.WindowLoad\n    },\n    {\n      title: 'Time',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (createdAt: any) => moment(createdAt).format('HH:mm:ss'),\n      sorter: (a: any, b: any) => {\n        const timestampA = moment(a.createdAt).format('X')\n        const timestampB = moment(b.createdAt).format('X')\n        return parseInt(timestampA) - parseInt(timestampB)\n      }\n    }\n  ]\n\n  return (\n    <>\n      <Title level={2}>Metrics and Entries</Title>\n      <Table\n        rowKey=\"_id\"\n        className=\"table-striped-rows\"\n        columns={columns}\n        expandable={{ expandedRowRender }}\n        dataSource={metrics?.filter((item) => selectedUrls.includes(item.URL))}\n        expandedRowKeys={expandedRowKeys}\n        onExpand={onTableRowExpand}\n        scroll={{ y: 400, x: 1024 }}\n        tableLayout=\"auto\"\n      />\n    </>\n  )\n}\n\nexport default EntriesWidget\n","import { useMetricContext } from '~/context/MetricProvider'\n\nimport EntriesWidget from '~/components/EntriesWidget'\n\nfunction Entries() {\n  const { metrics, selectedUrls } = useMetricContext()\n\n  return <EntriesWidget metrics={metrics} selectedUrls={selectedUrls} />\n}\n\nexport default Entries\n","import { Typography } from 'antd'\nimport classNames from 'classnames/bind'\n\nimport styles from './styles.module.scss'\n\nconst { Title } = Typography\n\nconst cx = classNames.bind(styles)\n\nfunction TitleWidget() {\n  return <Title className={cx('title-widget')}>PerfAnalytics Dashboard</Title>\n}\n\nexport default TitleWidget\n","import { Row, Col } from 'antd'\n\nimport BaseLayout from '~/layouts/BaseLayout'\nimport PerfCharts from './PerfCharts'\nimport Filter from './Filter'\nimport Entries from './Entries/index'\nimport TitleWidget from '~/components/TitleWidget'\n\nfunction Main() {\n  return (\n    <BaseLayout>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <TitleWidget />\n        </Col>\n\n        <Col span={24}>\n          <Filter />\n        </Col>\n\n        <Col span={24}>\n          <PerfCharts />\n        </Col>\n\n        <Col span={24}>\n          <Entries />\n        </Col>\n      </Row>\n    </BaseLayout>\n  )\n}\n\nexport default Main\n","import AppProviders from '~/context/AppProviders'\nimport Main from '~/routes/Main'\nimport '~/styles/App.less'\n\nfunction App() {\n  return (\n    <AppProviders>\n      <Main />\n    </AppProviders>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}