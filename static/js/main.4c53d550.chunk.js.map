{"version":3,"sources":["layouts/styles.module.scss","components/TitleWidget/styles.module.scss","service/axios.ts","service/index.ts","context/MetricProvider.tsx","context/AppProviders/index.tsx","layouts/BaseLayout.tsx","util/color.utils.tsx","components/LineChartWidget/index.tsx","routes/Main/PerfCharts/index.tsx","components/TimeRangeFilter/index.tsx","util/text.utils.tsx","components/UrlFilter/index.tsx","routes/Main/Filter/index.tsx","components/EntriesWidget/index.tsx","routes/Main/Entries/index.tsx","components/TitleWidget/index.tsx","routes/Main/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","axios","Axios","create","baseURL","process","REACT_APP_BASE_URL","headers","fetchMetricByTimeRange","start","end","a","get","params","data","console","log","fetchMetricByURL","MetricContext","createContext","MetricProvider","children","useState","metrics","setMetrics","urlMetrics","setUrlMetrics","selectedUrls","setSelectedUrls","useEffect","initializeMetrics","then","context","Provider","value","useMetricContext","useContext","AppProviders","Footer","Layout","Content","cx","classNames","bind","styles","BaseLayout","className","justify","style","paddingTop","lg","span","href","stringToColor","str","hash","i","length","charCodeAt","colour","toString","substr","LineChartWidget","ResponsiveContainer","width","height","LineChart","margin","top","right","bottom","left","filter","item","includes","url","map","Line","type","stroke","dot","dataKey","name","CartesianGrid","strokeDasharray","XAxis","domain","tickFormatter","unixTime","moment","format","YAxis","Tooltip","labelFormatter","PerfCharts","mapMetrics","URL","time","Date","getTime","gutter","xs","md","title","Title","Typography","TimeRangeFilter","setTimeRange","date","setDate","subtract","startTime","setStartTime","endTime","setEndTime","level","Item","onChange","dateString","defaultValue","RangePicker","onClick","toISOString","getClippedText","text","maxLength","CheckboxGroup","Checkbox","Group","UrlFilter","urls","onSelect","urlOptions","label","labelCol","offset","indeterminate","e","target","checked","options","list","Filter","metricUrl","metricByTimeRange","EntriesWidget","expandedRowKeys","setExpandedRowKeys","expandedRowEntries","setExpandedRowEntries","columns","dataIndex","key","ellipsis","showTitle","render","rel","sorter","b","UserAgent","FCP","TTFB","DomLoad","WindowLoad","createdAt","timestampA","timestampB","parseInt","rowKey","expandable","expandedRowRender","transferSize","dataSource","pagination","tableLayout","onExpand","expanded","record","keys","push","_id","Entries","scroll","y","x","TitleWidget","Main","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c53d550.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"base-layout\":\"styles_base-layout__1tdqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title-widget\":\"styles_title-widget__iXp_I\"};","import Axios from 'axios'\n\nconst axios = Axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nexport default axios\n","import axios from './axios'\n\nimport { Metric, MetricByURL } from '~/models/Metric'\n\nasync function fetchMetricByTimeRange(start?: Date, end?: Date) {\n  const { data } = await axios.get('/api/metrics', {\n    params: {\n      start,\n      end\n    }\n  })\n  console.log(`data time range: `, data)\n  return data as Metric[]\n}\n\nasync function fetchMetricByURL(start?: Date, end?: Date) {\n  const { data } = await axios.get('/api/metrics-by-url', {\n    params: {\n      start,\n      end\n    }\n  })\n  console.log(`data url: `, data)\n\n  return data as MetricByURL[]\n}\n\nexport { fetchMetricByTimeRange, fetchMetricByURL }\n","import {\n  createContext,\n  useContext,\n  PropsWithChildren,\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction\n} from 'react'\n\nimport { Metric, MetricByURL } from '~/models/Metric'\nimport { fetchMetricByTimeRange, fetchMetricByURL } from '~/service'\n\ninterface MetricContextModel {\n  metrics: Metric[]\n  setMetrics: Dispatch<SetStateAction<Metric[]>>\n  urlMetrics: MetricByURL[]\n  setUrlMetrics: Dispatch<SetStateAction<MetricByURL[]>>\n  selectedUrls: string[]\n  setSelectedUrls: Dispatch<SetStateAction<string[]>>\n}\n\nconst MetricContext = createContext<MetricContextModel>(\n  {} as MetricContextModel\n)\nfunction MetricProvider({ children }: PropsWithChildren<any>) {\n  const [metrics, setMetrics] = useState<Metric[]>([])\n  const [urlMetrics, setUrlMetrics] = useState<MetricByURL[]>([])\n  const [selectedUrls, setSelectedUrls] = useState<string[]>([])\n\n  useEffect(() => {\n    const initializeMetrics = async () => {\n      setMetrics(await fetchMetricByTimeRange())\n      setUrlMetrics(await fetchMetricByURL())\n    }\n\n    initializeMetrics().then()\n  }, [])\n\n  const context: MetricContextModel = {\n    metrics,\n    setMetrics,\n    urlMetrics,\n    setUrlMetrics,\n    selectedUrls,\n    setSelectedUrls\n  }\n\n  return (\n    <MetricContext.Provider value={context}>{children}</MetricContext.Provider>\n  )\n}\n\nconst useMetricContext = () => useContext(MetricContext)\n\nexport { MetricContext, MetricProvider, useMetricContext }\n","import { PropsWithChildren } from 'react'\nimport { MetricProvider } from '../MetricProvider'\n\nfunction AppProviders({ children }: PropsWithChildren<any>) {\n  return <MetricProvider>{children}</MetricProvider>\n}\n\nexport default AppProviders\n","import { PropsWithChildren } from 'react'\nimport { Layout, Row, Col } from 'antd'\nimport classNames from 'classnames/bind'\nimport styles from './styles.module.scss'\n\nconst { Footer, Content } = Layout\nconst cx = classNames.bind(styles)\n\ninterface BaseLayoutProps {}\n\nfunction BaseLayout({ children }: PropsWithChildren<BaseLayoutProps>) {\n  return (\n    <Layout className={cx('base-layout')}>\n      <Content>\n        <Row justify={'center'} style={{ paddingTop: 25 }}>\n          <Col lg={{ span: 18 }}>{children}</Col>\n        </Row>\n      </Content>\n      <Footer>\n        <Row justify={'center'}>\n          <p>\n            Made by <a href=\"https://github.com/hasantezcan\">@hasantezcan</a>\n          </p>\n        </Row>\n      </Footer>\n    </Layout>\n  )\n}\n\nexport default BaseLayout\n","const stringToColor = function (str: string) {\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n  }\n  let colour = '#'\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xff\n    colour += ('00' + value.toString(16)).substr(-2)\n  }\n  return colour\n}\n\nexport { stringToColor }\n","import {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts'\nimport { ChartMetric } from '~/models/Metric'\nimport { stringToColor } from '~/util/color.utils'\nimport { useMetricContext } from '~/context/MetricProvider'\nimport moment from 'moment'\ninterface LineChartWidgetProps {\n  data?: ChartMetric[]\n}\n\nfunction LineChartWidget({ data }: LineChartWidgetProps) {\n  const { selectedUrls } = useMetricContext()\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={220}>\n      <LineChart margin={{ top: 5, right: 20, bottom: 5, left: 20 }}>\n        {data\n          ?.filter((item) => selectedUrls.includes(item.url))\n          .map((url) => (\n            <Line\n              key={url.url}\n              type=\"monotone\"\n              stroke={stringToColor(url.url)}\n              dot={false}\n              dataKey=\"value\"\n              name={url.url}\n              data={url.data}\n            />\n          ))}\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n        <XAxis\n          domain={['auto', 'auto']}\n          dataKey=\"time\"\n          name=\"Time\"\n          type=\"number\"\n          tickFormatter={(unixTime) => moment(unixTime).format('HH:mm:ss')}\n        />\n        <YAxis\n          dataKey=\"value\"\n          type=\"number\"\n          tickFormatter={(value) => `${value} ms`}\n        />\n        <Tooltip labelFormatter={(name: any) => moment(name).format('HH:mm')} />\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChartWidget\n","import { Row, Col, Card } from 'antd'\nimport { Empty } from 'antd'\n\nimport LineChartWidget from '@components/LineChartWidget'\nimport { useMetricContext } from '~/context/MetricProvider'\nimport { ChartMetric, MetricType, TimeStampValue } from '~/models/Metric'\n\nfunction PerfCharts() {\n  const { urlMetrics, selectedUrls } = useMetricContext()\n\n  const mapMetrics = (type: MetricType): ChartMetric[] =>\n    urlMetrics.map((url) => ({\n      url: url.URL,\n      data: url[type].map(\n        (i): TimeStampValue => ({\n          value: i.value,\n          time: new Date(i.time).getTime()\n        })\n      )\n    }))\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Card title=\"TTFB\">\n          {selectedUrls.length > 0 ? (\n            <LineChartWidget data={mapMetrics('TTFB')} />\n          ) : (\n            <Empty />\n          )}\n        </Card>\n      </Col>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Card title=\"FCP\">\n          {selectedUrls.length > 0 ? (\n            <LineChartWidget data={mapMetrics('FCP')} />\n          ) : (\n            <Empty />\n          )}\n        </Card>\n      </Col>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Card title=\"DomLoad\">\n          {selectedUrls.length > 0 ? (\n            <LineChartWidget data={mapMetrics('DomLoad')} />\n          ) : (\n            <Empty />\n          )}\n        </Card>\n      </Col>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Card title=\"WindowLoad\">\n          {selectedUrls.length > 0 ? (\n            <LineChartWidget data={mapMetrics('WindowLoad')} />\n          ) : (\n            <Empty />\n          )}\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default PerfCharts\n","import { useState } from 'react'\nimport { DatePicker, TimePicker, Button, Form, Typography } from 'antd'\nimport moment from 'moment'\n\nconst { Title } = Typography\n\ninterface TimeRangeFilterProps {\n  setTimeRange: (start: any, end: any) => void\n}\n\nfunction TimeRangeFilter({ setTimeRange }: TimeRangeFilterProps) {\n  const [date, setDate] = useState(moment().format('YYYY-MM-DD'))\n  const [startTime, setStartTime] = useState(\n    moment().subtract(30, 'minutes').format('HH:mm:ss')\n  )\n  const [endTime, setEndTime] = useState(moment().format('HH:mm:ss'))\n\n  const handleTimeRange = () => {\n    const start = moment(`${date} ${startTime}`).toISOString()\n    const end = moment(`${date} ${endTime}`).toISOString()\n\n    setTimeRange(start, end)\n  }\n\n  return (\n    <Form>\n      <Title level={3}>Select Time Range</Title>\n      <Form.Item>\n        <DatePicker\n          onChange={(value, dateString) => setDate(dateString)}\n          defaultValue={moment()}\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <TimePicker.RangePicker\n          onChange={(value, dateString) => {\n            setStartTime(dateString[0])\n            setEndTime(dateString[1])\n          }}\n          defaultValue={[moment().subtract(30, 'minutes'), moment()]}\n        />\n      </Form.Item>\n\n      <Form.Item>\n        <Button type=\"primary\" onClick={handleTimeRange}>\n          Get Metrics\n        </Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default TimeRangeFilter\n","import { Tooltip } from 'antd'\n\n/* Function to generate the text inside Tooltip with ellipsis when text exceeds given length */\nfunction getClippedText(text: string, maxLength: number) {\n  return text.length > maxLength ? (\n    <Tooltip title={text}>{text.substr(0, maxLength)}...</Tooltip>\n  ) : (\n    text\n  )\n}\n\nexport { getClippedText }\n","import { Checkbox, Typography, Form } from 'antd'\nimport { getClippedText } from '~/util/text.utils'\n\nconst { Title } = Typography\nconst CheckboxGroup = Checkbox.Group\n\ninterface UrlFilterProps {\n  urls: string[]\n  onSelect: (urls: string[]) => void\n  selectedUrls: string[]\n}\n\nfunction UrlFilter({ urls, onSelect, selectedUrls }: UrlFilterProps) {\n  const onChange = (list: any) => {\n    onSelect(list)\n  }\n\n  const onCheckAllChange = (e: any) => {\n    onSelect(e.target.checked ? urls : [])\n  }\n\n  const urlOptions = urls.map((url) => ({\n    label: getClippedText(url, 40),\n    value: url\n  }))\n\n  return (\n    <Form>\n      <Title level={3}>Select URL</Title>\n\n      <Form.Item labelCol={{ span: 6, offset: 6 }}>\n        <Checkbox\n          indeterminate={\n            selectedUrls.length > 0 && selectedUrls.length !== urls.length\n          }\n          onChange={onCheckAllChange}\n          checked={selectedUrls.length > 0}\n        >\n          Check all\n        </Checkbox>\n      </Form.Item>\n\n      <Form.Item>\n        <CheckboxGroup\n          options={urlOptions}\n          value={selectedUrls}\n          onChange={onChange}\n        />\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default UrlFilter\n","import { useEffect } from 'react'\nimport { Row, Col, Card } from 'antd'\n\nimport TimeRangeFilter from '@components/TimeRangeFilter/index'\nimport UrlFilter from '~/components/UrlFilter'\nimport { fetchMetricByTimeRange, fetchMetricByURL } from '~/service'\nimport { useMetricContext } from '~/context/MetricProvider'\n\nfunction Filter() {\n  const {\n    setUrlMetrics,\n    setMetrics,\n    urlMetrics,\n    setSelectedUrls,\n    selectedUrls\n  } = useMetricContext()\n\n  const urls = urlMetrics.map((url) => url.URL)\n\n  const setTimeRange = async (start: any, end: any) => {\n    const metricUrl = await fetchMetricByURL(start, end)\n    const metricByTimeRange = await fetchMetricByTimeRange(start, end)\n    setUrlMetrics(metricUrl)\n    setMetrics(metricByTimeRange)\n  }\n\n  useEffect(() => {\n    setSelectedUrls(urls)\n    // eslint-disable-next-line\n  }, [urlMetrics])\n\n  return (\n    <Card>\n      <Row gutter={16}>\n        <Col md={12}>\n          <TimeRangeFilter setTimeRange={setTimeRange} />\n        </Col>\n        <Col md={12}>\n          <UrlFilter\n            urls={urls}\n            onSelect={setSelectedUrls}\n            selectedUrls={selectedUrls}\n          />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Filter\n","import { useState } from 'react'\nimport { Table, Typography } from 'antd'\nimport moment from 'moment'\n\nimport { getClippedText } from '~/util/text.utils'\nimport { Metric } from '~/models/Metric'\n\nimport './style.css'\n\nconst { Title } = Typography\ninterface EntriesWidgetProps {\n  metrics: Metric[]\n}\n\nfunction EntriesWidget({ metrics }: EntriesWidgetProps) {\n  const [expandedRowKeys, setExpandedRowKeys] = useState([])\n  const [expandedRowEntries, setExpandedRowEntries] = useState([])\n\n  const onTableRowExpand = (expanded: any, record: any) => {\n    const keys = []\n\n    if (expanded) {\n      keys.push(record._id)\n    }\n\n    setExpandedRowEntries(record.Entries)\n    setExpandedRowKeys(keys as any)\n  }\n\n  const expandedRowRender = () => {\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        ellipsis: {\n          showTitle: false\n        },\n        render: (name: any) => (\n          <a href={name} target=\"_blank\" rel=\"noreferrer\">\n            {getClippedText(name, 50)}\n          </a>\n        )\n      },\n      {\n        title: 'Initiator Type',\n        dataIndex: 'initiatorType',\n        key: 'initiatorType'\n      },\n      {\n        title: 'Response End',\n        dataIndex: 'responseEnd',\n        key: 'responseEnd',\n        ellipsis: true\n      },\n      {\n        title: 'Transfer Size',\n        dataIndex: 'transferSize',\n        key: 'transferSize',\n        render: (transferSize: any) => `${transferSize} B`\n      },\n      {\n        title: 'Time',\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: (createdAt: any) => moment(createdAt).format('HH:mm:ss')\n      }\n    ]\n\n    return (\n      <Table\n        columns={columns}\n        dataSource={expandedRowEntries}\n        pagination={false}\n        tableLayout=\"auto\"\n      />\n    )\n  }\n\n  const columns = [\n    {\n      title: 'Url',\n      dataIndex: 'URL',\n      key: 'URL',\n      ellipsis: {\n        showTitle: false\n      },\n      render: (URL: any) => (\n        <a href={URL} target=\"_blank\" rel=\"noreferrer\">\n          {getClippedText(URL, 65)}\n        </a>\n      ),\n      sorter: (a: any, b: any) => a.URL.length - b.URL.length\n    },\n    {\n      title: 'UserAgent',\n      dataIndex: 'UserAgent',\n      key: 'UserAgent',\n      ellipsis: {\n        showTitle: false\n      },\n      render: (UserAgent: any) => getClippedText(UserAgent, 20)\n    },\n    {\n      title: 'FCP',\n      dataIndex: 'FCP',\n      key: 'FCP',\n      ellipsis: true,\n      render: (FCP: any) => getClippedText(FCP.toString(), 9),\n      sorter: (a: any, b: any) => a.FCP - b.FCP\n    },\n    {\n      title: 'TTFB',\n      dataIndex: 'TTFB',\n      key: 'TTFB',\n      ellipsis: true,\n      render: (TTFB: any) => getClippedText(TTFB.toString(), 9),\n      sorter: (a: any, b: any) => a.TTFB - b.TTFB\n    },\n    {\n      title: 'DomLoad',\n      dataIndex: 'DomLoad',\n      key: 'DomLoad',\n      ellipsis: true,\n      render: (DomLoad: any) => getClippedText(DomLoad.toString(), 9),\n      sorter: (a: any, b: any) => a.DomLoad - b.DomLoad\n    },\n    {\n      title: 'WindowLoad',\n      dataIndex: 'WindowLoad',\n      key: 'WindowLoad',\n      ellipsis: true,\n      render: (WindowLoad: any) => getClippedText(WindowLoad.toString(), 9),\n      sorter: (a: any, b: any) => a.WindowLoad - b.WindowLoad\n    },\n    {\n      title: 'Time',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (createdAt: any) => moment(createdAt).format('HH:mm:ss'),\n      sorter: (a: any, b: any) => {\n        const timestampA = moment(a.createdAt).format('X')\n        const timestampB = moment(b.createdAt).format('X')\n        return parseInt(timestampA) - parseInt(timestampB)\n      }\n    }\n  ]\n\n  return (\n    <>\n      <Title level={2}>Metrics and Entries</Title>\n      <Table\n        rowKey=\"_id\"\n        className=\"table-striped-rows\"\n        columns={columns}\n        expandable={{ expandedRowRender }}\n        dataSource={metrics}\n        expandedRowKeys={expandedRowKeys}\n        onExpand={onTableRowExpand}\n        scroll={{ y: 400, x: 1024 }}\n        tableLayout=\"auto\"\n      />\n    </>\n  )\n}\n\nexport default EntriesWidget\n","import { useMetricContext } from '~/context/MetricProvider'\n\nimport EntriesWidget from '~/components/EntriesWidget'\n\nfunction Entries() {\n  const { metrics } = useMetricContext()\n\n  return <EntriesWidget metrics={metrics} />\n}\n\nexport default Entries\n","import { Typography } from 'antd'\nimport classNames from 'classnames/bind'\n\nimport styles from './styles.module.scss'\n\nconst { Title } = Typography\n\nconst cx = classNames.bind(styles)\n\nfunction TitleWidget() {\n  return <Title className={cx('title-widget')}>PerfAnalytics Dashboard</Title>\n}\n\nexport default TitleWidget\n","import { Row, Col } from 'antd'\n\nimport BaseLayout from '~/layouts/BaseLayout'\nimport PerfCharts from './PerfCharts'\nimport Filter from './Filter'\nimport Entries from './Entries/index'\nimport TitleWidget from '~/components/TitleWidget'\n\nfunction Main() {\n  return (\n    <BaseLayout>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <TitleWidget />\n        </Col>\n\n        <Col span={24}>\n          <Filter />\n        </Col>\n\n        <Col span={24}>\n          <PerfCharts />\n        </Col>\n\n        <Col span={24}>\n          <Entries />\n        </Col>\n      </Row>\n    </BaseLayout>\n  )\n}\n\nexport default Main\n","import AppProviders from '~/context/AppProviders'\nimport Main from '~/routes/Main'\nimport '~/styles/App.less'\n\nfunction App() {\n  return (\n    <AppProviders>\n      <Main />\n    </AppProviders>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}